x[start:length(result)] = result
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
warnings()
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
print(length(result))
print(length(result)-start)
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
print(length(result))
print(length(result)-start)
start = start + size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
x[start:length(result)+start] = result
print(length(result))
print(length(x[start:start+length(result)]))
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
#x[start:length(result)+start] = result
#print(length(result))
print((x[start:start+length(result)]))
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
foo <- accept_reject(f, 1.5, 1000)
print(foo)
foo <- accept_reject(f, 1.5, 10)
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
my_beta <- accept_reject(f, 1.5, 1000)
print(mean(my_beta))
print(var(my_beta))
explicit <- print(rbeta(1000, 2, 2))
print(mean(explicit))
print(var(explicit))
explicit <- rbeta(1000, 2, 2)
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
box_muller <- function(n, mean, var) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2000)
box_muller <- function(n, mean=0, var=1) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2000)
hist(z, prob = TRUE)
box_muller <- function(n, mean=0, var=1) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2001)
hist(z, prob = TRUE)
box_muller <- function(n, mean=0, var=1) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2001)
print(length(z))
hist(z, prob = TRUE)
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
# 1d
u = runif(1000)
rm(list() = ls)
rm(ls=list())
rm(list = ls())
# 1d
u = runif(1000)
f_inv <- function(x) {
return(exp(x))
}
data = f_inv(u)
hist(data)
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
# 1d
u = runif(1000)
f_inv <- function(x) {
return(exp(x))
}
data = f_inv(u)
hist(data, prob=T, breaks=50)
# 1e
mean(data)
var(data)
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
# 1e
mean(data)
var(data)
# 1d
u = runif(1000)
f_inv <- function(x) {
return(exp(x))
}
data = f_inv(u)
hist(data, prob=T, breaks=50)
# 1e
mean(data)
var(data)
source("C:/J/Computational-Statistics-main/HW2/hw2.R")
# 1e
mean(data)
var(data)
hist(rexp(1000, 1.5))
f_v <- function(v, theta) {
return(1 - exp(-v / theta))
}
u = runif(1000)
hist(f_v(u, 1.5))
f_v <- function(v, theta) {
return(-theta * ln(1-v))
}
u = runif(1000)
hist(f_v(u, 1.5))
f_v <- function(v, theta) {
return(-theta * logb(1-v))
}
u = runif(1000)
hist(f_v(u, 1.5))
f_v <- function(v, theta) {
return(-theta * logb(1-v))
}
u = runif(1000)
hist(f_v(u, 1/5))
hist(rexp(1000, 1/5))
curve(exp(x))
# 2c
hist(data, prob=T)
curve(exp(x))
# 2c
hist(data, prob=T)
f_v <- function(v, theta) {
return(-theta * logb(1-v))
}
u = runif(1000)
data - f_v(u, 1/5)
# 2c
hist(data, prob=T)
ground_truth = rexp(1000, 1/5)
hist(ground_truth)
f_v <- function(v, theta) {
return(-theta * logb(1-v))
}
u = runif(1000)
data = f_v(u, 1/5)
# 2c
hist(data, prob=T)
curve(exp(x))
curve(exp(x), add=T)
# 2c
hist(data, prob=T)
curve(exp(x), add=T)
pdf <- function(x, theta) {
return(1/theta * exp(-x / theta))
}
curve(pdf(x, 1/5), add=T)
rm(list = ls())
f_v <- function(v, theta) {
return(-theta * logb(1-v))
}
u = runif(1000)
data = f_v(u, 1/5)
ground_truth = rexp(1000, 1/5)
# 2c
hist(data, prob=T)
pdf <- function(x, theta) {
return(1/theta * exp(-x / theta))
}
curve(pdf(x, 1/5), add=T)
# 2d
hist(rexp(10000, 1/5))
# 2d
hist(rexp(n, 1/5))
hist(pexp(1/5))
hist(pexp(1000, 1/5))
hist(pexp(1000, 1/5))
curve(pexp(x, 1/5))
# 2d
hist(rexp(10000, 1/5))
# 2d
hist(rexp(10000, 1/5))
hist(rpois(1000, 5))
# 2d
hist(rexp(10000, 1/5))
hist(1 / rpois(10000, 5))
hist(1 / rpois(100000, 5))
# 2d
hist(rexp(10000, 1/5))
# 2d
hist(1/rexp(10000, 1/5))
# 2d
hist(rexp(10000, 1/5))
# 2d
hist(rexp(10000, 1/5)^-1)
# 2d
hist(rexp(10000, 1/5)^-1, bins=50)
# 2d
hist(rexp(10000, 1/5)^-1, breaks=50)
?hist
# 2d
hist(rexp(10000, 1/5)^-1, breaks=50, xlim=range(breaks))
# 2d
hist(rexp(10000, 1/5)^-1, breaks=50, xlim=range(50))
# 2d
hist(rexp(10000, 1/5)^-1)
# 2d
hist(rexp(10000, 1/5))
hist(1 / rpois(10000, 1/5))
hist(rpois(10000, 5))
# 2d
hist(rexp(10000, 1/5))
# 2d
hist(1/rexp(10000, 1/5))
hist(rpois(10000, 5))
# 2d
hist(1/rexp(10000, 1/5),prob=T)
hist(rpois(10000, 5),prob=T)
# 2d
hist(1/rexp(10000, 1/5),prob=T)
# 2d
hist(1/rexp(10000, 1/5),prob=T, xlim=(0,1))
# 2d
hist(1/rexp(10000, 1/5),prob=T, xlim=c(0,10))
# 2d
hist(1/rexp(10000, 1/5),prob=T, xlim=c(0,10), breaks=1000)
hist(rpois(10000, 5),prob=T)
# 2d
hist(1/rexp(10000, 1/5),prob=T)
hist(rpois(10000, 5),prob=T)
# 2d
hist(rexp(10000, 1/5),prob=T)
# 2d
data = 1 / rexp(10000, 1/5)
print(data)
# 2d
data = rexp(10000, 1/5)
print(data)
# 2d
data = rexp(10000, 5)
print(data)
print(mean(data))
# 2d
data = rexp(10000, 5)
print(mean(data))
# 2d
data = rexp(10000, 1/5)
print(mean(data))
hist(rexp(10000, 5),prob=T)
hist(rpois(10000, 5),prob=T)
hist(1/rexp(10000, 5),prob=T)
hist(rpois(10000, 5),prob=T)
hist(rexp(10000, 5),prob=T)
# 2d
data = rexp(10000, 5)
print(mean(data))
# 2d
data = 1 / rexp(10000, 5)
print(mean(data))
print((data))
# 2d
data = 1 / rexp(10000, 5)
print((data))
# 2d
data = rexp(10000, 5)
print((data))
print(mean(data))
hist(laplace(1000, 0, 2))
laplace <- function(n, mu, alpha) {
u = runif(1000)
f1 = mu + 1/alpha * logb(2 * u[u<0.5])
f2 = mu - 1/alpha * logb(2 - 2 * u[u>=0.5])
return(c(f1, f2))
}
hist(laplace(1000, 0, 2))
# 3d
ground_truth = rexp(1000, rate=2) - rexp(1000, rate=2)
hist(ground_truth)
hist(laplace(1000, 0, 2))
