# n: number of samples to compute
step_size <- n*c
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- 2*n - size
print(glue("size {size}"))
result <- result[1:size]
#x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
start = size
step_size = n - start
print(size)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 150, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n*c
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
print(size)
if (size >= n) { # Trim result when it overshoots n.
size <- 2*n - size
print(glue("size {size}"))
result <- result[1:size]
#x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
start = size
step_size = n - start
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 150, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n*c
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
print(size)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
#x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
start = size
step_size = n - start
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 150, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n*c
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
print(size)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
#x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
start = size
step_size = n - start
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 150, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n*c
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
print(size)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
#x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
start = size
step_size = n - start
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 150, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
print(size)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
#x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 150, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
print(size)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
#x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
print(size)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
x[start:length(result)] = result
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
warnings()
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
print(length(result))
print(length(result)-start)
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
#x[start:length(result)] = result
print(length(result))
print(length(result)-start)
start = start + size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
x[start:length(result)+start] = result
print(length(result))
print(length(x[start:start+length(result)]))
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
library(glue)
accept_reject <- function(f, c, n) {
# f: function F(x) which is the pdf of our target distribution
# c: acceptance threshold. P(accept) = 1/c
# n: number of samples to compute
step_size <- n
start <- 1
u <- runif(step_size)
y <- runif(step_size)
x <- double(n)
while (TRUE) {
result <- f(y, c)
accept <- result >= u
result <- result[accept]
size <- start + length(result)
if (size >= n) { # Trim result when it overshoots n.
size <- n - start
print(glue("size {size}"))
result <- result[1:size]
x[start:length(result)] = result
return(x)
}
#x[start:length(result)+start] = result
#print(length(result))
print((x[start:start+length(result)]))
start = size
step_size = (n - start)
}
}
f <- function(y, c) { # Beta(2,2)
6 * y * (1-y) / c
}
foo <- accept_reject(f, 15, 1000)
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
foo <- accept_reject(f, 1.5, 1000)
print(foo)
foo <- accept_reject(f, 1.5, 10)
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
my_beta <- accept_reject(f, 1.5, 1000)
print(mean(my_beta))
print(var(my_beta))
explicit <- print(rbeta(1000, 2, 2))
print(mean(explicit))
print(var(explicit))
explicit <- rbeta(1000, 2, 2)
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
source("C:/J/Computational-Statistics-main/distributions.R")
box_muller <- function(n, mean, var) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2000)
box_muller <- function(n, mean=0, var=1) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2000)
hist(z, prob = TRUE)
box_muller <- function(n, mean=0, var=1) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2001)
hist(z, prob = TRUE)
box_muller <- function(n, mean=0, var=1) {
u <- runif(n/2)
v <- runif(n/2)
z1 = sqrt(-2 * log(u)) * cos(2*pi*v)
z2 = sqrt(-2 * log(u)) * sin(2*pi*v)
z = c(z1, z2)
z = mean + sqrt(var) * z
return(z)
}
z = box_muller(2001)
print(length(z))
hist(z, prob = TRUE)
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
source("C:/J/Computational-Statistics-main/normal.R")
