for (i in 1:length(c)) {
F.c[i] = mean(x < c[i])
}
alpha = 0.05
upper.bound = F.c + qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
lower.bound = F.c - qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
plot(x=c, y=F.c, xlim=c(-5,5), ylim=c(-0.1, 1.1), lwd=2, main="Estimated
F(c)", pch=3, type="n")
lines(x=c, y=F.c, lty=1, lwd=2, col="black")
lines(x=c, y=upper.bound, lty=2, col="blue")
lines(x=c, y=lower.bound, lty=2, col="blue")
m = 1000
x = rbeta(m, 3, 3)
c = seq(0, 1, by=0.1)
F.c = double(length(c))
for (i in 1:length(c)) {
F.c[i] = mean(x < c[i])
}
alpha = 0.05
upper.bound = F.c + qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
lower.bound = F.c - qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
plot(x=c, y=F.c, xlim=c(0,1), ylim=c(-0.1, 1.1), lwd=2, main="Estimated
F(c)", pch=3, type="n")
lines(x=c, y=F.c, lty=1, lwd=2, col="black")
lines(x=c, y=upper.bound, lty=2, col="blue")
lines(x=c, y=lower.bound, lty=2, col="blue")
m = 1000
x = rbeta(m, 3, 3)
c = seq(0, 1, by=0.01)
F.c = double(length(c))
for (i in 1:length(c)) {
F.c[i] = mean(x < c[i])
}
alpha = 0.05
upper.bound = F.c + qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
lower.bound = F.c - qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
plot(x=c, y=F.c, xlim=c(0,1), ylim=c(-0.1, 1.1), lwd=2, main="Estimated
F(c)", pch=3, type="n")
lines(x=c, y=F.c, lty=1, lwd=2, col="black")
lines(x=c, y=upper.bound, lty=2, col="blue")
lines(x=c, y=lower.bound, lty=2, col="blue")
?pbeta
hist(pbeta(m))
hist(pbeta(m, 3, 3))
lines(x=c, y=pbeta(c, 3, 3), lty=3)
plot(x=c, y=F.c, xlim=c(0,1), ylim=c(-0.1, 1.1), lwd=2, main="Estimated
F(c)", pch=3, type="n")
lines(x=c, y=F.c, lty=1, lwd=2, col="black")
lines(x=c, y=upper.bound, lty=2, col="blue")
lines(x=c, y=lower.bound, lty=2, col="blue")
lines(x=c, y=pbeta(c, 3, 3), lty=3)
lines(x=c, y=pbeta(c, 3, 3), lty=3, col="green")
lines(x=c, y=pbeta(c, 3, 3), lty=3, col="black")
# 4
m = 1000
x = rbeta(m, 3, 3)
c = seq(0, 1, by=0.1)
F.c = double(length(c))
for (i in 1:length(c)) {
F.c[i] = mean(x < c[i])
}
alpha = 0.05
upper.bound = F.c + qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
lower.bound = F.c - qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
plot(x=c, y=F.c, xlim=c(0,1), ylim=c(-0.1, 1.1), lwd=2, main="Estimated
F(c)", pch=3, type="n")
lines(x=c, y=F.c, lty=1, lwd=2)
lines(x=c, y=upper.bound, lty=2)
lines(x=c, y=lower.bound, lty=2)
lines(x=c, y=pbeta(c, 3, 3), lty=3)
# 5
hist(rgamma(1000, 10, 1))
# 5
hist(rgamma(1000, 1000, 1))
# 5
hist(rgamma(1000, 100000, 1))
2 / sqrt(.1:.9:.1)
.1:.9
.1:.1:.9
2 / sqrt(seq(0, 1, by=0.1))
# 5a
r.sequence = 4 / seq(0.1, 0.9, by=0.1)^2
r.sequence
# 5b
B = 10000
m = 30
for (r in r.sequence) {
data = rgamma(B*m, shape=r, scale=1)
data = matrix(data, nrow = B)
library(EnvStats)
tb <- apply(xbmat, 1, function(x){varTest(x, alternative = "greater",
sigma.squared = r)$statistic})
alpha.sim <- mean(tb > qchisq(alpha, df=m-1, lower.tail=FALSE))
}
install package EnvStats
install.package("EnvStats")
install.packages("EnvStats")
library(EnvStats)
# 5b
B = 10000
m = 30
for (r in r.sequence) {
data = rgamma(B*m, shape=r, scale=1)
data = matrix(data, nrow = B)
library(EnvStats)
tb <- apply(xbmat, 1, function(x){varTest(x, alternative = "greater",
sigma.squared = r)$statistic})
alpha.sim <- mean(tb > qchisq(alpha, df=m-1, lower.tail=FALSE))
}
# 5b
library(EnvStats)
B = 10000
m = 30
for (r in r.sequence) {
data = rgamma(B*m, shape=r, scale=1)
data = matrix(data, nrow = B)
tb <- apply(data, 1, function(x){varTest(x, alternative = "greater",
sigma.squared = r)$statistic})
alpha.sim <- mean(tb > qchisq(alpha, df=m-1, lower.tail=FALSE))
}
# 5b
library(EnvStats)
B = 10000
m = 30
errors = c()
for (r in r.sequence) {
data = rgamma(B*m, shape=r, scale=1)
data = matrix(data, nrow = B)
tb <- apply(data, 1, function(x){varTest(x, alternative = "greater",
sigma.squared = r)$statistic})
empirical.error <- mean(tb > qchisq(alpha, df=m-1, lower.tail=FALSE))
errors = c(errors, empirical.error)
}
print(errors)
print(errors)
gamma = seq(0.2, 0.9, by=0.1)
r.sequence = 4 / gamma^2
# 5b
library(EnvStats)
B = 10000
m = 30
errors = c()
for (r in r.sequence) {
data = rgamma(B*m, shape=r, scale=1)
data = matrix(data, nrow = B)
tb <- apply(data, 1, function(x){varTest(x, alternative = "greater",
sigma.squared = r)$statistic})
empirical.error <- mean(tb > qchisq(alpha, df=m-1, lower.tail=FALSE))
errors = c(errors, empirical.error)
}
print(errors)
# 5c
plot(gamma, errors)
# 5c
plot(gamma, errors,
ylab="Empirical Type I Error")
# 5c
plot(gamma, errors,
xlab="Gamma"
ylab="Empirical Type I Error")
# 5c
plot(gamma, errors,
xlab="Gamma",
ylab="Empirical Type I Error")
lines(gamma, errors)
abline(y=0.075)
abline(errors=0.075)
abline(h=0.075)
# 5c
plot(gamma, errors,
main="Problem 5c",
xlab="Gamma",
ylab="Empirical Type 1 Error")
lines(gamma, errors)
abline(h=0.075)
m = 100000
x = runif(m)
y = 1 - log(1-x)
z = (-1/y + 1/floor(y)) * 1/(1-x)
theta = mean(z)
theta
n = 1000
alpha = 2
beta = 3
x = rexp(n*(alpha + beta))
x = matrix(x, nrow = n)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(n, 2, 3), main="Using rbeta()")
n = 100000
alpha = 2
beta = 3
x = rexp(n*(alpha + beta))
x = matrix(x, nrow = n)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(n, 2, 3), main="Using rbeta()")
n = 100000
alpha = 2
beta = 3
x = rexp(n*(alpha + beta))
x = matrix(x, nrow = n)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
n = 100000
alpha = 2
beta = 3
x = rexp(n*(alpha + beta))
x = matrix(x, nrow = n)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
n = 100000
alpha = 2
beta = 3
x = rexp(n*(alpha + beta))
x = matrix(x, nrow = n)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
n = 100000
alpha = 2
beta = 3
x = rexp(n*(alpha + beta))
x = matrix(x, nrow = n)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(n, alpha, beta), main="Using rbeta()")
n = 1000
x = rexp(n, rate=2)
cdf = 1 - exp(-2 * x)
hist(cdf)
n = 100000
x = rexp(n, rate=2)
cdf = 1 - exp(-2 * x)
hist(cdf)
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(n, alpha, beta), main="Using rbeta()")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n, rate=n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n, rate=n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n, rate=n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n, rate=n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n, rate=alpha)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n, rate=n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(alpha+beta)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
x[, 1:alpha]
dim(x[, 1:alpha])
dim(x[, (alpha+1):(n)])
B = 100000
n = 5
alpha = 2
beta = 3
x = rexp(B*n, rate=n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(n)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, alpha, beta), main="Using rbeta()")
hist(rbeta(B, 3, 2), main="Using rbeta()")
hist(rbeta(B, 2, 3), main="Using rbeta()")
hist(rbeta(B, 1, 3), main="Using rbeta()")
hist(rbeta(B, 2, 3), main="Using rbeta()")
hist(rbeta(B, 3, 2), main="Using rbeta()")
B = 100000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, 1:beta])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 100000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(n)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha * gamma.beta / gamma.all
hist(beta.dist, main="Beta distr. from exponential")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(n)])
gamma.all = rowSums(x)
beta.dist = gamma.alpha / (gamma.alpha + gamma.beta)
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, 2, 3), main="Using rbeta()")
B = 1000
n = 5
alpha = 2
beta = 3
x = rexp(B*n)
x = matrix(x, nrow = B)
gamma.alpha = rowSums(x[, 1:alpha])
gamma.beta = rowSums(x[, (alpha+1):(n)])
beta.dist = gamma.alpha / (gamma.alpha + gamma.beta)
hist(beta.dist, main="Beta distr. from exponential")
hist(rbeta(B, 2, 3), main="Using rbeta()")
hist(beta.dist, main="Beta distribution from exponential")
hist(rbeta(B, 2, 3), main="Using rbeta()")
hist(rbeta(B, 2, 3), main="Using rbeta()")
m = 1000
x = rbeta(m, 3, 3)
c = seq(0, 1, by=0.1)
F.c = double(length(c))
for (i in 1:length(c)) {
F.c[i] = mean(x < c[i])
}
alpha = 0.05
upper.bound = F.c + qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
lower.bound = F.c - qnorm(alpha/2, lower.tail = FALSE) * sqrt(F.c*(1-F.c)/m)
plot(x=c, y=F.c, xlim=c(0,1), ylim=c(-0.1, 1.1), lwd=2,
main="Problem 4",
xlab = "c",
ylab = "Cummulative Density",
pch=3, type="n")
lines(x=c, y=F.c, lty=1, lwd=2)
lines(x=c, y=upper.bound, lty=2)
lines(x=c, y=lower.bound, lty=2)
lines(x=c, y=pbeta(c, 3, 3), lty=3)
# 3b
m = 100000
a = -1
b = 1
x = runif(m, min=a, max=b)
y = 1 / sqrt(1 - x^2)
y.bar = mean(y)
theta = (b - a) * y.bar
theta
y = y[y < 3]
hist(y, breaks = seq(0, 3, by=0.1))
plot(1 / sqrt(1-x^2))
ls
dir
dirname
data <- read.table("sleep.txt", header=T)
getwd()
setwd("C:/J/Computational-Statistics-main/HW1/")
data <- read.table("sleep.txt", header=T)
y <- data$NonD
length(y)
sum(!is.na(y))
# 3b
w = na.omit(y)
w = y[!is.na(y)]
# 3c
sleep17 = data[,1:7]
apply(na.omit(sleep17), 2, mean) # ignoring nan
apply(sleep17, 2, mean) # including nan
# 3d
sleep35 = data[,3:5]
boxplot(sleep35, main = "Box Plot of the Sleep Data")
# 3e
tapply(data$Sleep, data$Danger, mean, na.rm = T)
apply(data, 1, function(x) any(x > 5))
data
apply(data, 1, function(x) all(x > 5))
apply(data, 1, function(x) all(x > -5))
?apply
apply(data$BrainWgt, 1, mean(x))
apply(data$BrainWgt, 1, mean)
apply(data$BrainWgt, mean)
apply(data, 1, mean)
data
apply(data, 2, mean)
# 3e
tapply(data$Sleep, data$Danger, mean, na.rm = TRUE)
apply(data, 2, mean, na.rm=T)
# 3c
sleep17 = data[,1:7]
apply(na.omit(sleep17), 2, mean) # ignoring nan
apply(sleep17, 2, mean) # including nan
